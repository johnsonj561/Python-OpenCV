#Justin Johnson Summer 2016
#EagleSMTComponent extends SMTComponent
#Class contains attributes and methods that interface individual SMT Components as generated by Eagle Centroid File
#Class is intended for use with Pick and Place Machine
from SMTComponent import SMTComponent

class EagleSMTComponent(SMTComponent):
  #constructor 
  #@param attributeList list of component's attributes, expects 6 attributes
  def __init__(self, attributeList):
    print("\nEagleSMTComponent init\n")
    #call parent constructor
    super(EagleSMTComponent, self).__init__(attributeList)
    #assign instance variables from list passed to constructor
    self.description, self.x_coord, self.y_coord, self.rotation, self.value, self.package = attributeList
    #override the SMTComponent attribute titles with the appropriate titles provided by Eagle Centroid output file
    self.attribute_titles = ["Description", "X Coordinate", "Y Coordinate", "Rotation", "Value", "Package"]
    
  #@return component description
  def getDescription(self):
    return self.description
  
  #@return component's center x coordinate
  def getXCoordinate(self):
    return self.x_coord
  
  #@return component's center y coordinate
  def getYCoordinate(self):
    return self.y_coord
  
  #@return component's angle of rotation
  def getRotation(self):
    return self.rotation
  
  #@return component's value
  def getValue(self):
    return self.value

  #@return component package details
  def getPackage(self):
    return self.package
  
  #Set component description
  #@param d component description
  def setDescription(self, d):
    self.description = self.attribute_list[0] = d
    
  #Set component's center x coordinate
  #@param x component's center x coordinate
  def setXCoordinate(self, x):
    self.x_coord = self.attribute_list[1] = x
  
  #Set component's center y coordinate
  #@param y component's center y coordinate
  def setYCoordinate(self, y):
    self.y_coord = self.attribute_list[2] = y
  
  #Set component's angle of rotation
  #@param r component's angle of rotation
  def setRotation(self, r):
    self.rotation = self.attribute_list[3] = r
  
  #Set component's value
  #@param v component's value
  def setValue(self, v):
    self.rotation = self.attribute_list[4] = v
  
  #Set component's package details
  #@param p component package details
  def setPackage(self, p):
    self.package = self.attribute_list[5] = p