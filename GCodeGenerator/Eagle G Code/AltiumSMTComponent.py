#Justin Johnson Summer 2016
#AltiumSMTComponent extends SMTComponent
#Class contains attributes and methods that interface individual SMT Components as generated by Altium Centroid File
#Class is intended for use with Pick and Place Machine
from SMTComponent import SMTComponent

class AltiumSMTComponent(SMTComponent):
  #constructor 
  #@param attributeList list of component's attributes provided by Altium Centroid File
  def __init__(self, attributeList):
    #call parent constructor
    super(AltiumSMTComponent, self).__init__(attributeList)
    #strip units from attributeList
    self.attribute_list = self.stripUnits(attributeList)
    #assign instance variables from list passed to constructor
    self.designator, self.footprint, self.x_coord, self.y_coord, self.x_reference, self.y_reference, self.x_pad, self.y_pad, self.board_side, self.rotation, self.comment = self.attribute_list
    #override the SMTComponent attribute titles with the appropriate titles provided by Altium Centroid output file
    self.attribute_titles = ["Ref Designator", "Footprint", "X Coordinate", "Y Coordinate", "X Reference", "Y Reference", "X Pad", "Y Pad", "Board Side", "Rotation", "Comment"]
    

  #Strip units from attribute list values (remove 'mil')
  #@return attributeList with 'mil' stripped
  def stripUnits(self, attributeList):
    strippedAttributeList = []
    for attribute in attributeList:
      attribute = attribute.replace("mil", "")
      strippedAttributeList.append(attribute)
    return strippedAttributeList
  
  #@return component reference designator
  def getDesignator(self):
    return self.designator
  
  #@return component footprint information
  def getFootprint(self):
    return self.footprint
  
  #@return component's center x coordinate
  def getXCoordinate(self):
    return self.x_coord
  
  #@return component's center y coordinate
  def getYCoordinate(self):
    return self.y_coord
  
   #@return component's cx reference point
  def getXReference(self):
    return self.x_reference
  
  #@return component's y reference point
  def getYReference(self):
    return self.y_reference
  
  #@return component's x pad value
  def getXPad(self):
    return self.x_pad
  
  #@return component's y pad value
  def getYPad(self):
    return self.y_pad
  
  #@return board side that component is positioned on (TOP/BOTTOM/THRU)
  def getBoardSide(self):
    return self.board_side
  
  #@return component's angle of rotation
  def getRotation(self):
    return self.rotation
  
  #@return component comment info
  def getComment(self):
    return self.comment
  
  #Set component reference designator
  #@param d component description
  def setDesignator(self, d):
    self.designator = self.attribute_list[0] = d
    
  #@return component footprint information
  def setFootprint(self, f):
    self.footprint = self.attribute_list[1] = f
    
  #Set component's center x coordinate
  #@param x component's center x coordinate
  def setXCoordinate(self, x):
    self.x_coord = self.attribute_list[2] = x
  
  #Set component's center y coordinate
  #@param y component's center y coordinate
  def setYCoordinate(self, y):
    self.y_coord = self.attribute_list[3] = y
    
  #@return component's cx reference point
  def setXReference(self, x):
    self.x_reference = self.attribute_list[4] = x
  
  #@return component's y reference point
  def setYReference(self, y):
    self.y_reference = self.attribute_list[5] = y
    
  #@return component's x pad value
  def setXPad(self, x):
    self.x_pad = attribute_list[6] = x
  
  #@return component's y pad value
  def setYPad(self, y):
    self.y_pad = attribute_list[7] = y
  
  #Set component's baord side
  #@param side component's board side (TOP/BOTTOM/THRU)
  def setBoardSide(self, s):
    try:
      s = s.lower()
    except:
      print("Invalid argument " + str(s) + ", setBoardSide(s) accepts strings 'TOP' 'BOTTOM' 'THRU'")
    assert (s == "top" or s == "bottom" or s == "thru"),"Invalid argument " + str(s) + ", setBoardSide(s) accepts strings 'TOP' 'BOTTOM' 'THRU'"
    self.board_side = self.attribute_list[8] = s
    
  #Set component's angle of rotation
  #@param r angleof rotation
  def setRotation(self, r):
    self.rotation = self.attribute_list[9] = r
  
  #Set component's part name
  #@param p component part name
  def setComment(self, c):
    self.comment = self.attribute_list[10] = c