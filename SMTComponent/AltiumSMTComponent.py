#Justin Johnson Summer 2016
#AltiumSMTComponent extends SMTComponent
#Class contains attributes and methods that interface individual SMT Components as generated by Altium Centroid File
#Class is intended for use with Pick and Place Machine
from SMTComponent import SMTComponent

class AltiumSMTComponent(SMTComponent):
  #constructor 
  #@param attributeList list of component's attributes provided by Altium Centroid File
  def __init__(self, attributeList):
    print("\nAltiumSMTComponent init\n")
    self.attribute_list = attributeList
    self.designator, self.x_coord, self.y_coord, self.board_side, self.rotation, self.part_name = self.attribute_list
    #override the SMTComponent attribute titles with the appropriate titles provided by Altium Centroid output file
    self.attribute_titles = ["Ref Designator", "X Coordinate", "Y Coordinate", "Board Side", "Rotation", "Part Name"]
    
  #@return component reference designator
  def getDesignator(self):
    return self.designator
  
  #@return component's center x coordinate
  def getXCoordinate(self):
    return self.x_coord
  
  #@return component's center y coordinate
  def getYCoordinate(self):
    return self.y_coord
  
  #@return board side that component is positioned on (TOP/BOTTOM/THRU)
  def getBoardSide(self):
    return self.board_side
  
  #@return component's angle of rotation
  def getRotation(self):
    return self.rotation
  
  #@return part name of component
  def getPartName(self):
    return self.part_name
  
  #Set component reference designator
  #@param d component description
  def setDesignator(self, d):
    self.designator = self.attribute_list[0] = d
    
  #Set component's center x coordinate
  #@param x component's center x coordinate
  def setXCoordinate(self, x):
    self.x_coord = self.attribute_list[1] = x
  
  #Set component's center y coordinate
  #@param y component's center y coordinate
  def setYCoordinate(self, y):
    self.y_coord = self.attribute_list[2] = y
  
  #Set component's baord side
  #@param side component's board side (TOP/BOTTOM/THRU)
  def setBoardSide(self, s):
    try:
      s = s.lower()
    except:
      print("Invalid argument " + str(s) + ", setBoardSide(s) accepts strings 'TOP' 'BOTTOM' 'THRU'")
    assert (s == "top" or s == "bottom" or s == "thru"),"Invalid argument " + str(s) + ", setBoardSide(s) accepts strings 'TOP' 'BOTTOM' 'THRU'"
    self.board_side = self.attribute_list[3] = s
    
  #Set component's angle of rotation
  #@param r angleof rotation
  def setRotation(self, r):
    self.rotation = self.attribute_list[4] = r
  
  #Set component's part name
  #@param p component part name
  def setPartName(self, p):
    self.part_name = self.attribute_list[5] = p